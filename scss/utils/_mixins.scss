
// Mixins
// -----------------------------------------------------------------------------

// This is the default setting if not specified by the user
$browser-px: 16px;

/// Convert px to rem
/// @param {String} $property - value in px
/// @param {String} $context - default setting if not specified by the user
@mixin rem($property, $context)
{
    $browser-rem: $browser-px / 1rem * 1;
    @if type-of($context) == 'number' {
	#{$property}: $context / $browser-rem;

    } @else {
	$rem-values: ();
	@each $value in $context {
	    @if $value == 0 or type-of($value) != 'number' {
		$rem-values: append($rem-values, $value);
	    }
	    @else {
		$rem-values: append($rem-values, $value / $browser-rem);
	    }
	}
	#{$property}: $rem-values;
    }
}

/// Mixin helper to output vendor prefixes
/// @access public
/// @author Hugo Giraudel
/// @param {String} $property - Unprefixed CSS property
/// @param {*} $value - Raw CSS value
/// @param {List} $prefixes - List of prefixes to output
@mixin prefix($property, $value, $prefixes: ())
{
    @each $prefix in $prefixes {
	-#{$prefix}-#{$property}: $value;
    }
    #{$property}: $value;
}

/// Responsive breakpoint manager
/// @access public
/// @param {String} $breakpoint - Breakpoint
/// @requires $breakpoints
@mixin respond-to($breakpoint)
{
    $raw-query: map-get($breakpoints, $breakpoint);
    @if $raw-query {
	$query: if (
	    type-of($raw-query) == 'string',
	    unquote($raw-query),
	    inspect($raw-query)
	    );

	@media #{$query} {
	    @content;
	}
    }
}
